package com.bik.web3.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.2.
 */
@SuppressWarnings("rawtypes")
public class Mall3Goods extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b5060405162002c8238038062002c82833981016040819052620000349162000826565b6040518060800160405280604b815260200162002c37604b91396200005981620002fd565b506001600160a01b038416620000c85760405162461bcd60e51b815260206004820152602960248201527f4d616c6c33476f6f64733a20636f6e73747275637420746f20746865207a65726044820152686f206164647265737360b81b60648201526084015b60405180910390fd5b60008351118015620000dc5750825161ffff115b604080517f4d616c6c33476f6f64733a207468652073697a65206f66206974656d2069642060208201527f73686f756c64206265206265747765656e203120616e64200000000000000000818301526001600160f01b031960588201528151603a818303018152605a909101909152906200016c5760405162461bcd60e51b8152600401620000bf919062000958565b50600083516001600160401b038111156200018b576200018b62000743565b604051908082528060200260200182016040528015620001b5578160200160208202803683370190505b508451909150620001ce906006906020870190620006dc565b5060005b84518161ffff161015620002ad576001828261ffff1681518110620001fb57620001fb62000974565b6020026020010181815250508360046000878461ffff168151811062000225576200022562000974565b60200260200101518152602001908152602001600020819055508560056000878461ffff16815181106200025d576200025d62000974565b6020026020010151815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508080620002a490620009a0565b915050620001d2565b50620002d1858583604051806020016040528060008152506200030f60201b60201c565b600380546001600160a01b031916331790556007620002f1838262000a4f565b50505050505062000cfe565b60026200030b828262000a4f565b5050565b6001600160a01b038416620003715760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401620000bf565b8151835114620003d55760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401620000bf565b3360005b84518110156200047d57838181518110620003f857620003f862000974565b602002602001015160008087848151811062000418576200041862000974565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825462000462919062000b1b565b90915550819050620004748162000b37565b915050620003d9565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051620004d092919062000b90565b60405180910390a4620004e981600087878787620004f8565b5050505050565b505050505050565b62000517846001600160a01b0316620006cd60201b62000d6e1760201c565b15620004f05760405163bc197c8160e01b81526001600160a01b0385169063bc197c819062000553908990899088908890889060040162000bc2565b6020604051808303816000875af192505050801562000591575060408051601f3d908101601f191682019092526200058e9181019062000c26565b60015b6200065157620005a062000c52565b806308c379a003620005e05750620005b762000c6f565b80620005c45750620005e2565b8060405162461bcd60e51b8152600401620000bf919062000958565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401620000bf565b6001600160e01b0319811663bc197c8160e01b14620006c45760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401620000bf565b50505050505050565b6001600160a01b03163b151590565b8280548282559060005260206000209081019282156200071a579160200282015b828111156200071a578251825591602001919060010190620006fd565b50620007289291506200072c565b5090565b5b808211156200072857600081556001016200072d565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171562000781576200078162000743565b6040525050565b60005b83811015620007a55781810151838201526020016200078b565b50506000910152565b600082601f830112620007c057600080fd5b81516001600160401b03811115620007dc57620007dc62000743565b604051620007f5601f8301601f19166020018262000759565b8181528460208386010111156200080b57600080fd5b6200081e82602083016020870162000788565b949350505050565b600080600080608085870312156200083d57600080fd5b84516001600160a01b03811681146200085557600080fd5b602086810151919550906001600160401b03808211156200087557600080fd5b818801915088601f8301126200088a57600080fd5b8151818111156200089f576200089f62000743565b8060051b604051620008b48683018262000759565b9182528381018501918581018c841115620008ce57600080fd5b948601945b83861015620008ec5785518152948601948601620008d3565b5060408b015160608c0151919950975094505050808311156200090e57600080fd5b50506200091e87828801620007ae565b91505092959194509250565b600081518084526200094481602086016020860162000788565b601f01601f19169290920160200192915050565b6020815260006200096d60208301846200092a565b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600061ffff808316818103620009ba57620009ba6200098a565b6001019392505050565b600181811c90821680620009d957607f821691505b602082108103620009fa57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000a4a57600081815260208120601f850160051c8101602086101562000a295750805b601f850160051c820191505b81811015620004f05782815560010162000a35565b505050565b81516001600160401b0381111562000a6b5762000a6b62000743565b62000a838162000a7c8454620009c4565b8462000a00565b602080601f83116001811462000abb576000841562000aa25750858301515b600019600386901b1c1916600185901b178555620004f0565b600085815260208120601f198616915b8281101562000aec5788860151825594840194600190910190840162000acb565b508582101562000b0b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082018082111562000b315762000b316200098a565b92915050565b60006001820162000b4c5762000b4c6200098a565b5060010190565b600081518084526020808501945080840160005b8381101562000b855781518752958201959082019060010162000b67565b509495945050505050565b60408152600062000ba5604083018562000b53565b828103602084015262000bb9818562000b53565b95945050505050565b6001600160a01b0386811682528516602082015260a06040820181905260009062000bf09083018662000b53565b828103606084015262000c04818662000b53565b9050828103608084015262000c1a81856200092a565b98975050505050505050565b60006020828403121562000c3957600080fd5b81516001600160e01b0319811681146200096d57600080fd5b600060033d111562000c6c5760046000803e5060005160e01c5b90565b600060443d101562000c7e5790565b6040516003193d81016004833e81513d6001600160401b03808311602484018310171562000cae57505050505090565b828501915081518181111562000cc75750505050505090565b843d870101602082850101111562000ce25750505050505090565b62000cf36020828601018762000759565b509095945050505050565b611f298062000d0e6000396000f3fe6080604052600436106100df5760003560e01c80634e1273f411610084578063e8a3d48511610056578063e8a3d4851461029a578063e985e9c5146102af578063f242432a146102d2578063f7d97577146102f257005b80634e1273f414610228578063a22cb46514610248578063b7760c8f14610267578063d96a094a1461028757005b80631d1440fd116100bd5780631d1440fd146101785780632eb2c2d6146101c6578063410d59cc146101e657806342966c681461020857005b8062fdd58e146100e857806301ffc9a71461011b5780630e89341c1461014b57005b366100e657005b005b3480156100f457600080fd5b506101086101033660046115e5565b610312565b6040519081526020015b60405180910390f35b34801561012757600080fd5b5061013b610136366004611628565b6103ab565b6040519015158152602001610112565b34801561015757600080fd5b5061016b61016636600461164c565b6103fb565b60405161011291906116b5565b34801561018457600080fd5b506101ae61019336600461164c565b6000908152600560205260409020546001600160a01b031690565b6040516001600160a01b039091168152602001610112565b3480156101d257600080fd5b506100e66101e1366004611814565b61048f565b3480156101f257600080fd5b506101fb6105b7565b60405161011291906118f9565b34801561021457600080fd5b506100e661022336600461164c565b610772565b34801561023457600080fd5b506101fb61024336600461190c565b61082a565b34801561025457600080fd5b506100e66102633660046119d7565b5050565b34801561027357600080fd5b506100e6610282366004611a13565b610954565b6100e661029536600461164c565b6109f9565b3480156102a657600080fd5b5061016b610b33565b3480156102bb57600080fd5b5061013b6102ca366004611a3f565b600092915050565b3480156102de57600080fd5b506100e66102ed366004611a69565b610bc5565b3480156102fe57600080fd5b506100e661030d366004611ace565b610ca6565b60006001600160a01b0383166103825760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806103dc57506001600160e01b031982166303a24d0760e21b145b806103a557506301ffc9a760e01b6001600160e01b03198316146103a5565b60606002805461040a90611af0565b80601f016020809104026020016040519081016040528092919081815260200182805461043690611af0565b80156104835780601f1061045857610100808354040283529160200191610483565b820191906000526020600020905b81548152906001019060200180831161046657829003601f168201915b50505050509050919050565b6001600160a01b0385163314806104ab57506104ab85336102ca565b806104c057506003546001600160a01b031633145b6105325760405162461bcd60e51b815260206004820152603960248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f766564206f72206275696c646572000000000000006064820152608401610379565b61053f8585858585610d7d565b60005b83518110156105af57846005600086848151811061056257610562611b2a565b6020026020010151815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080806105a790611b56565b915050610542565b505050505050565b60606000805b60065461ffff8216101561063a57336001600160a01b03166005600060068461ffff16815481106105f0576105f0611b2a565b600091825260208083209091015483528201929092526040019020546001600160a01b031603610628578161062481611b6f565b9250505b8061063281611b6f565b9150506105bd565b5061ffff81161561065957505060408051600081526020810190915290565b60008161ffff1667ffffffffffffffff811115610678576106786116c8565b6040519080825280602002602001820160405280156106a1578160200160208202803683370190505b5090506000915060005b60065461ffff8216101561076b57336001600160a01b03166005600060068461ffff16815481106106de576106de611b2a565b600091825260208083209091015483528201929092526040019020546001600160a01b0316036107595760068161ffff168154811061071f5761071f611b2a565b906000526020600020015482848061073690611b6f565b955061ffff168151811061074c5761074c611b2a565b6020026020010181815250505b8061076381611b6f565b9150506106ab565b5092915050565b6003546001600160a01b0316336001600160a01b0316146107e85760405162461bcd60e51b815260206004820152602a60248201527f4d616c6c33476f6f64733a206f6e6c7920706c6174666f726d20636f756c6420604482015269313ab937103a37b5b2b760b11b6064820152608401610379565b60008181526005602052604090205461080c906001600160a01b0316826001610f52565b600090815260056020526040902080546001600160a01b0319169055565b6060815183511461088f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610379565b6000835167ffffffffffffffff8111156108ab576108ab6116c8565b6040519080825280602002602001820160405280156108d4578160200160208202803683370190505b50905060005b845181101561094c5761091f8582815181106108f8576108f8611b2a565b602002602001015185838151811061091257610912611b2a565b6020026020010151610312565b82828151811061093157610931611b2a565b602090810291909101015261094581611b56565b90506108da565b509392505050565b6000828152600560205260409020546001600160a01b031633148061098357506003546001600160a01b031633145b6040518060600160405280602e8152602001611ea2602e913980826109bb5760405162461bcd60e51b815260040161037991906116b5565b5060008481526005602090815260408083205481519283019091529181526109f3916001600160a01b03169085908790600190610bc5565b50505050565b600081815260046020526040902054610a1690633b9aca00611b90565b3414610a21346110d3565b600083815260046020526040902054610a39906110d3565b604051602001610a4a929190611ba7565b604051602081830303815290604052818190610a795760405162461bcd60e51b815260040161037991906116b5565b506000838152600560209081526040808320546004909252909120546001600160a01b03909116906108fc90610ab390633b9aca00611b90565b6040518115909202916000818181858888f19350505050158015610adb573d6000803e3d6000fd5b50600083815260056020526040902054610b11906001600160a01b03163385600160405180602001604052806000815250611166565b5050600090815260056020526040902080546001600160a01b03191633179055565b606060078054610b4290611af0565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6e90611af0565b8015610bbb5780601f10610b9057610100808354040283529160200191610bbb565b820191906000526020600020905b815481529060010190602001808311610b9e57829003601f168201915b5050505050905090565b6001600160a01b038516331480610be15750610be185336102ca565b80610bf657506003546001600160a01b031633145b610c685760405162461bcd60e51b815260206004820152603c60248201527f4d616c6c33476f6f64733a2063616c6c6572206973206e6f7420746f6b656e2060448201527f6f776e6572206f7220617070726f766564206f72206275696c646572000000006064820152608401610379565b610c758585858585611166565b5050600090815260056020526040902080546001600160a01b0319166001600160a01b039290921691909117905550565b6000828152600560209081526040918290205482516060810190935260248084526001600160a01b0390911633149291611ed0908301398082610cfc5760405162461bcd60e51b815260040161037991906116b5565b50600083116040518060400160405280601c81526020017f4d616c6c33476f6f64733a20707269636520697320696e76616c696400000000815250818190610d575760405162461bcd60e51b815260040161037991906116b5565b505050600093845250506004602052604090912055565b6001600160a01b03163b151590565b8151835114610ddf5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610379565b6001600160a01b038416610e055760405162461bcd60e51b815260040161037990611c23565b3360005b8451811015610eec576000858281518110610e2657610e26611b2a565b602002602001015190506000858381518110610e4457610e44611b2a565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610e945760405162461bcd60e51b815260040161037990611c68565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610ed1908490611cb2565b9250508190555050505080610ee590611b56565b9050610e09565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610f3c929190611cc5565b60405180910390a46105af818787878787611290565b6001600160a01b038316610fb45760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610379565b336000610fc0846113eb565b90506000610fcd846113eb565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156110565760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610379565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b606060006110e083611436565b600101905060008167ffffffffffffffff811115611100576111006116c8565b6040519080825280601f01601f19166020018201604052801561112a576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461113457509392505050565b6001600160a01b03841661118c5760405162461bcd60e51b815260040161037990611c23565b336000611198856113eb565b905060006111a5856113eb565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156111e85760405162461bcd60e51b815260040161037990611c68565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611225908490611cb2565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611285848a8a8a8a8a61150e565b505050505050505050565b6001600160a01b0384163b156105af5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906112d49089908990889088908890600401611cf3565b6020604051808303816000875af192505050801561130f575060408051601f3d908101601f1916820190925261130c91810190611d51565b60015b6113bb5761131b611d6e565b806308c379a003611354575061132f611d8a565b8061133a5750611356565b8060405162461bcd60e51b815260040161037991906116b5565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610379565b6001600160e01b0319811663bc197c8160e01b146110ca5760405162461bcd60e51b815260040161037990611e14565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061142557611425611b2a565b602090810291909101015292915050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106114755772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106114a1576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106114bf57662386f26fc10000830492506010015b6305f5e10083106114d7576305f5e100830492506008015b61271083106114eb57612710830492506004015b606483106114fd576064830492506002015b600a83106103a55760010192915050565b6001600160a01b0384163b156105af5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906115529089908990889088908890600401611e5c565b6020604051808303816000875af192505050801561158d575060408051601f3d908101601f1916820190925261158a91810190611d51565b60015b6115995761131b611d6e565b6001600160e01b0319811663f23a6e6160e01b146110ca5760405162461bcd60e51b815260040161037990611e14565b80356001600160a01b03811681146115e057600080fd5b919050565b600080604083850312156115f857600080fd5b611601836115c9565b946020939093013593505050565b6001600160e01b03198116811461162557600080fd5b50565b60006020828403121561163a57600080fd5b81356116458161160f565b9392505050565b60006020828403121561165e57600080fd5b5035919050565b60005b83811015611680578181015183820152602001611668565b50506000910152565b600081518084526116a1816020860160208601611665565b601f01601f19169290920160200192915050565b6020815260006116456020830184611689565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715611704576117046116c8565b6040525050565b600067ffffffffffffffff821115611725576117256116c8565b5060051b60200190565b600082601f83011261174057600080fd5b8135602061174d8261170b565b60405161175a82826116de565b83815260059390931b850182019282810191508684111561177a57600080fd5b8286015b84811015611795578035835291830191830161177e565b509695505050505050565b600082601f8301126117b157600080fd5b813567ffffffffffffffff8111156117cb576117cb6116c8565b6040516117e2601f8301601f1916602001826116de565b8181528460208386010111156117f757600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561182c57600080fd5b611835866115c9565b9450611843602087016115c9565b9350604086013567ffffffffffffffff8082111561186057600080fd5b61186c89838a0161172f565b9450606088013591508082111561188257600080fd5b61188e89838a0161172f565b935060808801359150808211156118a457600080fd5b506118b1888289016117a0565b9150509295509295909350565b600081518084526020808501945080840160005b838110156118ee578151875295820195908201906001016118d2565b509495945050505050565b60208152600061164560208301846118be565b6000806040838503121561191f57600080fd5b823567ffffffffffffffff8082111561193757600080fd5b818501915085601f83011261194b57600080fd5b813560206119588261170b565b60405161196582826116de565b83815260059390931b850182019282810191508984111561198557600080fd5b948201945b838610156119aa5761199b866115c9565b8252948201949082019061198a565b965050860135925050808211156119c057600080fd5b506119cd8582860161172f565b9150509250929050565b600080604083850312156119ea57600080fd5b6119f3836115c9565b915060208301358015158114611a0857600080fd5b809150509250929050565b60008060408385031215611a2657600080fd5b82359150611a36602084016115c9565b90509250929050565b60008060408385031215611a5257600080fd5b611a5b836115c9565b9150611a36602084016115c9565b600080600080600060a08688031215611a8157600080fd5b611a8a866115c9565b9450611a98602087016115c9565b93506040860135925060608601359150608086013567ffffffffffffffff811115611ac257600080fd5b6118b1888289016117a0565b60008060408385031215611ae157600080fd5b50508035926020909101359150565b600181811c90821680611b0457607f821691505b602082108103611b2457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611b6857611b68611b40565b5060010190565b600061ffff808316818103611b8657611b86611b40565b6001019392505050565b80820281158282048414176103a5576103a5611b40565b7f4d616c6c33476f6f64733a20707269636520697320696e76616c69642c206d73815267033903b30b63ab2960c51b602082015260008351611bf0816028850160208801611665565b66010383934b1b2960cd1b6028918401918201528351611c1781602f840160208801611665565b01602f01949350505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b808201808211156103a5576103a5611b40565b604081526000611cd860408301856118be565b8281036020840152611cea81856118be565b95945050505050565b6001600160a01b0386811682528516602082015260a060408201819052600090611d1f908301866118be565b8281036060840152611d3181866118be565b90508281036080840152611d458185611689565b98975050505050505050565b600060208284031215611d6357600080fd5b81516116458161160f565b600060033d1115611d875760046000803e5060005160e01c5b90565b600060443d1015611d985790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715611dc857505050505090565b8285019150815181811115611de05750505050505090565b843d8701016020828501011115611dfa5750505050505090565b611e09602082860101876116de565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611e9690830184611689565b97965050505050505056fe4d616c6c33476f6f64733a206f6e6c79206f776e6572206f72206275696c6465722063616e207472616e736665724d616c6c33476f6f64733a206f6e6c79206f776e65722063616e20736574207072696365a2646970667358221220c4270bc3cb9e7655dd96351ace47fed46d7a0c9c17b0b38892b407d8d39f2e1064736f6c6343000811003368747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f6a696e67706569636f6d702f6d616c6c332d6e66742d6d6574612f323032322d31322d32362f7b69647d2e6a736f6e";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_BUY = "buy";

    public static final String FUNC_CONTRACTURI = "contractURI";

    public static final String FUNC_GETITEMOWNER = "getItemOwner";

    public static final String FUNC_GETITEMS = "getItems";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETPRICE = "setPrice";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_URI = "uri";

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event URI_EVENT = new Event("URI", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected Mall3Goods(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Mall3Goods(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Mall3Goods(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Mall3Goods(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<TransferBatchEventResponse> getTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ids = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
            typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferBatchEventResponse>() {
            @Override
            public TransferBatchEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
                TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ids = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
                typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
        return transferBatchEventFlowable(filter);
    }

    public static List<TransferSingleEventResponse> getTransferSingleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferSingleEventResponse>() {
            @Override
            public TransferSingleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
                TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
        return transferSingleEventFlowable(filter);
    }

    public static List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(URI_EVENT, transactionReceipt);
        ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            URIEventResponse typedResponse = new URIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<URIEventResponse> uRIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, URIEventResponse>() {
            @Override
            public URIEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(URI_EVENT, log);
                URIEventResponse typedResponse = new URIEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<URIEventResponse> uRIEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(URI_EVENT));
        return uRIEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account, BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> balanceOfBatch(List<String> accounts, List<BigInteger> ids) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(accounts, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> burn(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> buy(BigInteger tokenId, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<String> contractURI() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONTRACTURI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getItemOwner(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETITEMOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getItems() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETITEMS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String account, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(String from, String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger id, BigInteger amount, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPrice(BigInteger tokenId, BigInteger price) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPRICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.generated.Uint256(price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(BigInteger tokenId, String to) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Address(160, to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> uri(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_URI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static Mall3Goods load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Mall3Goods(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Mall3Goods load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Mall3Goods(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Mall3Goods load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Mall3Goods(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Mall3Goods load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Mall3Goods(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Mall3Goods> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String to, List<BigInteger> itemIds, BigInteger price, String contractUrl) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(itemIds, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(price), 
                new org.web3j.abi.datatypes.Utf8String(contractUrl)));
        return deployRemoteCall(Mall3Goods.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Mall3Goods> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String to, List<BigInteger> itemIds, BigInteger price, String contractUrl) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(itemIds, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(price), 
                new org.web3j.abi.datatypes.Utf8String(contractUrl)));
        return deployRemoteCall(Mall3Goods.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Mall3Goods> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String to, List<BigInteger> itemIds, BigInteger price, String contractUrl) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(itemIds, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(price), 
                new org.web3j.abi.datatypes.Utf8String(contractUrl)));
        return deployRemoteCall(Mall3Goods.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Mall3Goods> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String to, List<BigInteger> itemIds, BigInteger price, String contractUrl) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(itemIds, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(price), 
                new org.web3j.abi.datatypes.Utf8String(contractUrl)));
        return deployRemoteCall(Mall3Goods.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String account;

        public String operator;

        public Boolean approved;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ids;

        public List<BigInteger> values;
    }

    public static class TransferSingleEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public BigInteger id;

        public BigInteger value;
    }

    public static class URIEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String value;
    }
}
